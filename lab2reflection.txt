1. Your design probably has a type called something like Car or Vehicle that is a supertype to both Volvo and Scania. 
What is the contract for gas() and brake() in this type? Do the implementations of gas() and brake() in both Volvo 
and Scania follow this contract? Does your design follow the Liskov Substitution Principle?

    The contract for gas() and brake() is that it requires a positive variable of type double with a value between 1 and 0 as parameter. The methods will then 
    increment and decrement the speed respectively. In Volvo the gas method works the same way as in Car since it is not being overridden, therefore it follows 
    the Liskov Substitution Principle. In Scania the gas method is overridden since we implement a condition that the angle of the platform needs to be equal 
    to 0, somewhat breaking the Liskov Substitution Principle by strengthening the precondition. The brake method is never overriden and follows the principle.
    
    
2. How did you handle duplicated code between Scania, the car transporters and the repair shops? Explain how you decided 
when to use subclassing and when to use composition and delegation.

    We choose to use composition. We created classes that took care of the storage and platform movements and limitations. CarTransporter and CarRepairShop uses 
    storage to keep track of its inventory. The reason we chose to use composition were because the limitations of subclassing. We needed CarTransporter to have 
    access to the methods in Car, platform and storage. Subclassing only allows for one superclass, and since we don't want all cars to have platforms or storages, 
    we use composition to share methods while not forcing all subclasses to have the same methods.


3. Did you need to modify the design from lab 1 in order to make these extensions? If so, how could you have noticed that 
your design from Lab 1 did not follow the Open-Closed Principle before you started working on Lab 2?
    
    We didn't need to change anything from lab 1 when implementing these extensions in lab 2.
